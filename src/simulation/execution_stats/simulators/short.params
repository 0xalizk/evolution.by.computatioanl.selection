version                  = v4
reduction_mode           = reverse
sampling_rounds          = 4X
sampling_rounds_max      = 4
pressure                 = 0.1,1,5,10,15,20,25,50,75,100
tolerance                = 0.1,1,5,25,50
BD_criteria              = both
KP_solver_source         = /home/mcb/malsha17/EvoByCompSel/parallel/Release-03/lib/kp_solvers/minknap_execstats.c
KP_solver_binary         = /home/mcb/malsha17/EvoByCompSel/scratch/minknap_execstats.so
output_directory         = /home/mcb/malsha17/EvoByCompSel/scratch/US_Perrimon/v4_alpha0.2
advice_upon              = edges
biased                   = True
alpha                    = 0.2
network_file             = /home/mcb/malsha17/EvoByCompSel/parallel/Release-03/data/Perrimon/US_Perrimon/input/US_Perrimon.txt
network_name             = US_Perrimon

# comments: 
# output_directory   = desired path of directory where to store simulation results. results (along with a copy of this simulation file) will be stored in this dir 
# pressure           = [comma seperated percentages of nodes to be subjected to evolutionary pressure] 
# tolerance          = [comma seperated percentages of tolerated edges whose signs contradict the oracle advice] 
# sampling_threshold = simulations rounds will be the  minimum of sampling_threshold (above) and 2x(no. nodes + no. edges) 
# BD_criteria        = [source, target, both] corresponding to the three variations of NEP definition 
# KP_solver_source   = absolute path to the knapsack solver source [minknap.c, DP_solver.c] 
# KP_solver_binary   = absolute path to the knapsack solver binary [minknap.so, DP_solver.so], source will be compiled here 
#                     Note: minknap()   returns [knapsack_value, knapsack_weight(WRONG),   coresize] 
#                     DP_solver() returns [knapsack_value, knapsack_weight(CORRECT), number_of_genes n] 
