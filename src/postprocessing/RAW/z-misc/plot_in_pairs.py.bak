from scipy import stats as scipy_stats
import matplotlib as mpl
mpl.use('Agg')
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties, findfont
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.ticker as plticker
import matplotlib.gridspec as gridspec
import numpy as np
import pandas as pd
from matplotlib import rcParams
#import seaborn as sns
import os,sys
import math, time
from multiprocessing import Process

pd.set_option('display.precision', 3)

linestyle= '' #'dotted' # 'solid'   'dashed'   'None'
alpha=.5
markeredgecolor='none' 

rcParams['axes.labelsize'] = 8
rcParams['axes.titlesize'] = 8
rcParams['xtick.labelsize'] = 6
rcParams['ytick.labelsize'] = 6
#rcParams['font.family'] = 'sans-serif'  
#rcParams['font.family'] = 'serif'  
rcParams['font.serif']= 'DejaVu Sans' #['Bitstream Vera Sans', 'DejaVu Sans', 'Lucida Grande', 'Verdana', 'Geneva', 'Lucid', 'Arial', 'Helvetica', 'Avant Garde', 'sans-serif']
rcParams['grid.alpha'] = 0.1
rcParams['axes.grid']=False
rcParams['ytick.minor.pad']=0.01
rcParams['ytick.major.pad']=0.01
rcParams['savefig.pad_inches']=.01
rcParams['grid.color']='white'
#rcParams['legend.facecolor']='#FFFFFF'
#rcParams['figure.frameon']=True
#rcParams['savefig.frameon']=True

#--------------------------------------------------------------------------------------
def getCommandLineArg():
    try:
        input_file  = str(sys.argv[1])
    except:
        print ('Usage: python3 plot_in_pairs.py [input-file (containing paths to BY_GENE.csv files) ] \nExiting...')
        sys.exit(1)
    return input_file
#--------------------------------------------------------------------------------------
def getPairs (datafiles):
    PAIRS = []
    counter = 0
    for f in range(int(len(datafiles)/2)):
        network1 = datafiles[counter].strip()
        network2 = datafiles[counter+1].strip()
        PAIRS.append([  network1, network2])
        counter +=2
       
    SUBPLOTS=[]   
    for pair in PAIRS:
        data_file1, data_file2 = pair[0].strip() ,  pair[1].strip() 
        s1, s2 =  data_file1.split('/')[-1].split('_RAW_'),  data_file2.split('/')[-1].split('_RAW_')
        prefix1, prefix2, suffix1, suffix2 = s1[0], s2[0], s1[1].split('_'), s2[1].split('_')
        title1 = prefix1+" [$"+suffix1[1].replace('p','p=')+", "+suffix1[2].replace('t','t=')+", $"+suffix1[6]+", "+suffix1[7]+"]"
        title2 = prefix2+" [$"+suffix2[1].replace('p','p=')+", "+suffix2[2].replace('t','t=')+", $"+suffix2[6]+", "+suffix2[7]+"]"
        
        SUBPLOTS.append(((prefix1, data_file1, title1), (prefix2, data_file2, title2)))
        
    return SUBPLOTS
#--------------------------------------------------------------------------------------
def scatter_BD(df, fig, ax, configs):
    Bs_Ds = {}
    for i in range(0,len(df),5):
        tmp_Bs    = [int(b) for b in df[i+1].split() if b!='nil']
        tmp_Ds    = [int(d) for d in df[i+2].split() if d!='nil']
        assert len(tmp_Bs) == len(tmp_Ds)
        if len(tmp_Bs)>0:
            for obj in zip(tmp_Bs, tmp_Ds):
                if obj in Bs_Ds.keys():
                    Bs_Ds[obj] +=1
                else:
                    Bs_Ds[obj] = 1
    Bs,Ds,frequency,colors = [],[],[],[]
    for obj in Bs_Ds.keys():
        Bs.append(obj[0])
        Ds.append(obj[1])
        frequency.append(Bs_Ds[obj])        
    #-------------------------------------------------------     
    frequency = ([math.log(f,2) for f in frequency])
    #-------------------------------------------------------    
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.set_aspect('equal', adjustable='box')
    sc = ax.scatter (Ds, Bs, alpha=alpha, marker=configs['marker'], edgecolors='none',  c=frequency, cmap=configs['cmap'])                      
    cbar = fig.colorbar(sc, shrink=0.4, pad=0.01, aspect=20, fraction=.2) # 'aspect' ratio of long to short dimensions, # 'fraction' of original axes to use for colorbar
    cbar.outline.set_visible(False)
    cbar.set_label(configs['cbar_label'] )
    cbar_ax = cbar.ax
    cbar_ax.tick_params(axis='y', which='minor', bottom='off', top='off', left='off', right='off',  labelleft='off', labelright='off') 
    cbar_ax.tick_params(axis='y', which='major', bottom='off', top='off', left='off', right='off',  labelleft='off', labelright='on')
    cbar_ax.tick_params(axis='both', which='major', labelsize=configs['cbar_labelsize'])
        
    return sc
#--------------------------------------------------------------------------------------  
def coresize (df, ax, configs): 
    cores =  []  
    for i in range(0,len(df),5):
        stats = [int(s) for s in df[i+4].split() if s!='nil']
        assert len(stats)==2 or len(stats)==0
        if len(stats)>0:
            cores = cores + [stats[0]] # stats[1] = execution_time
    relfreq = scipy_stats.relfreq(cores, numbins=10)
    #Calculate space of values for x
    x = relfreq.lowerlimit + np.linspace(0, relfreq.binsize*relfreq.frequency.size, relfreq.frequency.size)
    #ax.set_xlim([x.min(), x.max()])
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    sc = ax.bar(x, relfreq.frequency, width=relfreq.binsize)
            
    return sc 
#--------------------------------------------------------------------------------------  
def polar (df, ax, configs): 
    Bs, Ds = [], []
    for i in range(0,len(df),5):
        Bs    = [int(b) for b in df[i+1].split() if b!='nil']
        Ds    = [int(d) for d in df[i+2].split() if d!='nil']       
        assert len(Bs)==len(Ds)
        if len(Bs)>0:
            ax.scatter(Bs,Ds,marker=configs['marker'], cmap=configs['cmap'])
    return ax
#--------------------------------------------------------------------------------------  
def green_grey_red (df, ax, configs):
    greens, greys, reds = [], [], []
    for i in range(0,len(df),5):
        Bs     = [int(s) for s in df[i+1].split() if s!='nil']
        Ds     = [int(s) for s in df[i+2].split() if s!='nil']
        w, g, r, instance_size = 0, 0, 0, 0.0
        assert len(Bs) == len(Ds)
        if len(Bs)>0:
            for b,d in zip (Bs, Ds):
                if (b>0 and d==0):
                    w  += 1
                    instance_size += 1
                elif (b>0 and d>0):
                    g   += 1
                    instance_size += 1
                elif (b==0 and d>0):
                    r  += 1
                    instance_size += 1
                else:
                    sys.stdout.write ("FATAL: either b or d must be > 0\nExiting...")
                    sys.ext(1)

            assert instance_size == len(Bs) == len(Ds) == (w+g+r)
        
            greens.append(float(w)/instance_size)
            greys.append (float(g)/instance_size)
            reds.append(float(r)/instance_size)
                  
    width            = 0.2       # the width of the bars
    y_pos            = np.arange(3)
    categories       = [np.average(greens), np.average(greys), np.average(reds)]
    yerr             = [np.std(greens), np.std(greys), np.std(reds)]
    colors           = ['green','grey','red']
    
    ax.bar(y_pos, categories, width,  color=colors, align='center', yerr=yerr)
    ax.xticks = ['green','grey','red']
    plt.xticks(y_pos + width/2., ('$B>0, D=0$', '$B>0, D>0$', '$B=0, D>0$'))
        
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
       
    return ax 
#--------------------------------------------------------------------------------------  
def pearsonr_BD (df, ax, configs): 
    r, pvalue = [], []
    for i in range(0,len(df),5):
        Bs    = [int(b) for b in df[i+1].split() if b!='nil']
        Ds    = [int(d) for d in df[i+2].split() if d!='nil']
        assert len(Bs) == len(Ds)
        if len(Bs)>0:
            pearsonr = scipy_stats.pearsonr(Bs,Ds)
            r      = r      + [pearsonr[0]]
            pvalue = pvalue + [pearsonr[1]]
                    
    relfreq = scipy_stats.relfreq(r, numbins=10)        
    #Calculate space of values for x
    x = relfreq.lowerlimit + np.linspace(0, relfreq.binsize*relfreq.frequency.size, relfreq.frequency.size)          
    #ax.set_xlim([x.min(), x.max()])
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.bar(x, relfreq.frequency, width=relfreq.binsize)
           
    return ax, ', $avg \quad p-value='+ str((np.average(pvalue)))+'$' 
#-------------------------------------------------------------------------------------- 
def PLOTTER (PAIRS, configs): 
    fig = plt.figure(figsize=configs['fig_size'])
    fig.suptitle(configs['fig_suptitle'], fontsize=configs['fig_suptitle_fontsize'])  
    savename =""
    pos=1
    for  pair in PAIRS:
        for prefix, file_path, title in pair:
            savename=prefix[0:4]+"_"
            if configs['projection'] != None:
                ax = fig.add_subplot(len(PAIRS), len(PAIRS[0]), pos, projection=configs['projection'])
            else:
                ax = fig.add_subplot(len(PAIRS), len(PAIRS[0]), pos)
            #----------------------------------------------------------------------------------------
            fig.subplots_adjust(left=0.1 , bottom=0.1, right=.9, top=.9, wspace=configs['wspace'], hspace=configs['hspace'] )
            # the values of left, right, bottom and top are to be provided as fractions of the figure width and height. In additions, all values 
            # are measured from the left and bottom edges of the figure. This is why right and top can't be lower than left and right.
            #----------------------------------------------------------------------------------------
            ax.grid(True)
            ax.set_title(title)
            sys.stdout.write ("\n"+configs['plot'].ljust(13,' ')+"\t"+title.replace('$','').ljust(65,' ')+"\t"+str(int(float(pos)*100/(len(PAIRS)*len(PAIRS[0]))))+" %")
            df = open (file_path, 'r').readlines()
            assert len(df) % 5 == 0 and len(df) % 5 == 0
            
            x_suff=""
            if configs['plot'] == "scatter_BD":
                sc = scatter_BD(df, fig, ax, configs)
            elif configs['plot'] == "coresize":
                sc = coresize (df, ax, configs)  
            elif configs['plot']=='polar':
                sc = polar(df, ax, configs)   
            elif configs['plot']=='green_grey_red':
                sc = green_grey_red (df, ax, configs)
            else:
                sc, x_suff = pearsonr_BD (df, ax, configs)
            
            ax.set_xlabel (configs['xlabel']+x_suff )
            ax.set_ylabel (configs['ylabel'])
            ax.tick_params(axis='x', which='both', left='off', right='off', bottom='on', top='off',  labelbottom='on', labeltop='off') # both major and minor ticks
            ax.tick_params(axis='y', which='both', bottom='off', top='off', left='on', right='off',  labelleft='on', labelright='off') # both major and minor ticks          
            
            pos +=1  
         
    sys.stdout.write ('\n'+"\t"*10+configs['plot']+ " >>> saving plot .. ")
    sys.stdout.flush()
    plt.savefig(plots_dir+"/"+savename.replace('__','_')+"_"+configs['plot']+configs['file_extension'], dpi=configs['dpi'], bbox_inches="tight")      
    sys.stdout.write ('\n'+"\t"*10+configs['plot']+ " >>> plotted: "+savename.replace('__','_')+"_"+configs['plot']+configs['file_extension']+"\n")  
    sys.stdout.flush()
    return "success"                 
#--------------------------------------------------------------------------------------  
def distance_BD (PAIRS):
    fig = plt.figure()
    fig.subplots_adjust(hspace = .8, wspace=.8)
    pos=1
    for pair in PAIRS:
        data_file1, data_file2 = pair[0].strip() ,  pair[1].strip() 
        prefix1, prefix2 = data_file1.split('/')[-1].split('_RAW_')[0], data_file2.split('/')[-1].split('_RAW_')[0]
        suffix1, suffix2 = data_file1.split('/')[-1].split('_'), data_file2.split('/')[-1].split('_')
        title1, title2 = prefix1+"_"+suffix1[-3]+"_"+suffix1[-2], prefix1+"_"+suffix2[-3]+"_"+suffix2[-2]
        df1                  = open (data_file1, 'r').readlines()
        df2                  = open (data_file2, 'r').readlines()
        assert len(df1) % 5 == 0 and len(df2) % 5 == 0
        BD_disparity, Bs, Ds = [], [], []
        for  df, title in [(df1, title1), (df2, title2)]:
            ax = plt.subplot(len(PAIRS), 2 ,pos, projection='polar')
            ax.set_title(title) 
            sys.stdout.write ("\n\t\t"+title+"\t")
            for i in range(0,len(df),5):
                Bs    = [int(b) for b in df[i+1].split() if b!='nil']
                Ds    = [int(d) for d in df[i+2].split() if d!='nil']
                BD_disparity = BD_disparity + [abs(b-d) for b,d in zip(Bs,Ds)]   
                sys.stdout.write ('\r\t\t\t\t\t\t'+str(int(i*100/len(df))+1)+" %\t("+str(i)+" instances)")
                
            relfreq = scipy_stats.relfreq(BD_disparity, numbins=10)
            #Calculate space of values for x
            x = relfreq.lowerlimit + np.linspace(0, relfreq.binsize*relfreq.frequency.size, relfreq.frequency.size)
            ax.set_xlim([x.min(), x.max()])
            ax.bar(x, relfreq.frequency, width=relfreq.binsize)
                  
            pos +=1                    

    plt.savefig(plots_dir+"/"+title1+"_"+title2+"_distance_plot.png")
#--------------------------------------------------------------------------------------

if __name__ == "__main__": 

    input_file, plots_dir = getCommandLineArg(), os.path.join(os.getcwd(),'plots')
    if not os.path.isdir(plots_dir):
        os.mkdir(plots_dir)
    datapoints_files = open (input_file).readlines()
    PAIRS = getPairs (datapoints_files)
    stamp = "".join(input_file.split('/')[-1])
    file_extension = ".svg"
    
    figure_size = (len(PAIRS[0])*5,len(PAIRS)*len(PAIRS[0])*math.log(len(PAIRS)*len(PAIRS[0]), 10)) #(width, height)
    dpi = 500
      
    configs_polar = {
                'fig_size':              figure_size,
                'fig_suptitle':          "Benefit vs Damage plot", 
                'fig_suptitle_fontsize': 18,             
                'plot':                  "polar",
                'xlabel':                "Damage", 
                'ylabel':                "Benefit",
                'cbar_label':            "$Frequency \quad (log_2)$",
                'cmap':                  plt.cm.get_cmap('plasma'),
                'marker':                mpl.markers.MarkerStyle(marker='+', fillstyle=None),
                'alpha':                 1,
                'cbar_labelsize':        5,
                'wspace':                0.4,
                'hspace':                0.4,
                'file_extension':        '_'+stamp+file_extension,
                'projection':            'polar',
                'dpi':                   dpi
    }   
    configs_scatter_BD = {
                'fig_size':              figure_size,
                'fig_suptitle':          "Benefit vs Damage plot", 
                'fig_suptitle_fontsize': 18,             
                'plot':                  "scatter_BD",
                'xlabel':                "Damage", 
                'ylabel':                "Benefit",
                'cbar_label':            "$Frequency \quad (log_2)$",
                'cmap':                  plt.cm.get_cmap('plasma'),
                'marker':                mpl.markers.MarkerStyle(marker='+', fillstyle=None),
                'alpha':                 1,
                'cbar_labelsize':        5,
                'wspace':                0.3,
                'hspace':                0.3,
                'file_extension':        '_'+stamp+file_extension,
                'projection':            None,
                'dpi':                   dpi
    }   
    configs_coresize = {
                'fig_size':              figure_size,
                'fig_suptitle':          "Instance coresize (Psinger minknap algorithm)", 
                'fig_suptitle_fontsize': 18,   
                'plot':                  "coresize",
                'xlabel':                "core size", 
                'ylabel':                "fraction",
                'cbar_label':            None,
                'cbar_labelsize':        None,
                'cmap':                  plt.cm.get_cmap('plasma'),
                'marker':                None,
                'alpha':                 1,
                'cbar_labelsize':        None,
                'wspace':                0.3,
                'hspace':                0.3,
                'file_extension':        '_'+stamp+file_extension,
                'projection':            None,
                'dpi':                   dpi
    }
    configs_green_grey_red = {
                'fig_size':              figure_size,
                'fig_suptitle':          "Green, Grey, and Red Genes", 
                'fig_suptitle_fontsize': 18,   
                'plot':                  "green_grey_red",
                'xlabel':                "Gene B/D class", 
                'ylabel':                "fraction",
                'cbar_label':            None,
                'cbar_labelsize':        None,
                'cmap':                  plt.cm.get_cmap('plasma'),
                'marker':                None,
                'alpha':                 1,
                'cbar_labelsize':        None,
                'wspace':                0.4,
                'hspace':                0.4,
                'file_extension':        '_'+stamp+file_extension,
                'projection':            None,
                'dpi':                   dpi
    }
    configs_pearsonr_BD = {
                'fig_size':              figure_size,
                'fig_suptitle':          "Pearson $r$ correlation coeff. ", 
                'fig_suptitle_fontsize': 18,   
                'plot':                  "pearsonr_BD",
                'xlabel':                "pearson $r$", 
                'ylabel':                "fraction",
                'cbar_label':            None,
                'cbar_labelsize':        None,
                'cmap':                  plt.cm.get_cmap('plasma'),
                'marker':                None,
                'alpha':                 1,
                'cbar_labelsize':        None,
                'wspace':                0.4,
                'hspace':                0.4,
                'file_extension':        '_'+stamp+file_extension,
                'projection':            None,
                'dpi':                   dpi
    }

    #a   = Process(target=PLOTTER, args=(PAIRS, configs_polar,))   
    b   = Process(target=PLOTTER, args=(PAIRS, configs_scatter_BD,))
    c   = Process(target=PLOTTER, args=(PAIRS, configs_coresize,))
    d   = Process(target=PLOTTER, args=(PAIRS, configs_green_grey_red,))
    e   = Process(target=PLOTTER, args=(PAIRS, configs_pearsonr_BD,))
    
    #a.daemon = True
    b.daemon = True
    c.daemon = True
    d.daemon = True
    e.daemon = True
    
    #a.start()
    time.sleep(1)
    result_b = b.start()
    time.sleep(1)
    result_c = c.start()
    time.sleep(1)
    result_d = d.start()
    time.sleep(1)
    result_e = e.start()
    time.sleep(1)
    
    #a.join()
    b.join()
    c.join()
    d.join()
    e.join()
    
    sys.stdout.write ("scatter_BD: "+str(result_b))
    sys.stdout.write ("coresize: "+str(result_c))
    sys.stdout.write ("green_grey_red: "+str(result_d))
    sys.stdout.write ("pearsonr_BD: "+str(result_e))
    sys.stdout.flush()
    
    
    
    
    
