import sys,os
sys.path.insert(0, os.getenv('lib'))
import time, math, json, numpy as np,  init_plotting as init, util_plotting as util
#######################################################################################
mywrite = util.mywrite
#######################################################################################
def max_lines (pair, configs):
    num_lines = []      
    limit = 0
    try:
        limit = int(configs['max_lines'])
        if limit<=0:
            limit = -1
    except:
        limit = -1 # read the whole file       
    for p in pair:
        file_path = p[5]
        df = open (file_path, 'r')
        counter = 0       
        try:
            while True:
                next(df)
                next(df)
                next(df)       
                next(df)
                next(df)
                counter +=5
                if limit>0 and counter>limit:
                    num_lines.append(counter)
                    break              
        except:
            num_lines.append(counter)
            counter=0
    if len(num_lines)==0:
        num_lines=0
    else:
        num_lines=min(num_lines)  
    try:
        if int(configs['max_lines'])>0:
            num_lines = min(int(configs['max_lines']), num_lines)
    except:
        pass
    return num_lines
    '''
    num_lines=[]
    for prefix, file_path, title in pair:
        num_lines.append(0)
        df = open (file_path, 'r')
        while True:
            try: # insist on reading chunks of 5 lines 
                next(df)                
                next(df)
                next(df)
                next(df) 
                next(df) 
            except:
                break
            num_lines[-1] += 5       
    if len(num_lines)==0:
        num_lines=[0]
    return min(num_lines)
    '''
#######################################################################################
def assign_range(slices, b, d):
    right_key, b2d_ratio, d2b_ratio = 0,0,0
    if b==0 and d==0:
        right_key =   [key for key in slices['segments'].keys() if slices['segments'][key]['range'][0]==0 and  slices['segments'][key]['range'][1]==0]

    elif b>=d: 
        b2d_ratio, d2b_ratio = round((float(b)/float(b+d))*100, 12), round((float(d)/float(b+d))*100,12)
        right_key = [key for key in slices['segments'].keys() if (b2d_ratio-slices['segments'][key]['range'][0]) >=0 and (b2d_ratio-slices['segments'][key]['range'][0]) <slices['interval']  and (slices['segments'][key]['range'][1]-d2b_ratio)>=0 and (slices['segments'][key]['range'][1]-d2b_ratio)<slices['interval'] ]
    
    else:
        b2d_ratio, d2b_ratio = (float(b)/float(b+d))*100, (float(d)/float(b+d))*100
        right_key = [key for key in slices['segments'].keys() if (slices['segments'][key]['range'][0]-b2d_ratio) >=0 and (slices['segments'][key]['range'][0]-b2d_ratio) <slices['interval']  and (d2b_ratio-slices['segments'][key]['range'][1])>=0 and (d2b_ratio-slices['segments'][key]['range'][1])<slices['interval'] ]
    
    
    assert len(right_key)==1
    return right_key[0]
#######################################################################################
def setup(arguments, rank):
    configs       = init.load_simulation_configs (arguments, rank) #at this point, configs doesnt yet contain configs ['worker_load'] and configs ['num_workers'], obtained after json-loading configs json-dumped by master (below)
    M, configs_update, loaded =  None, None, False

    log_dir = configs['logs_dir']
    
    while not loaded: #wait for master.py to dump  updated configs and get it
        try:
            if os.path.isdir(configs['output_dir']) and  os.path.isfile(util.slash(configs['output_dir'])+ "configs/configs_"+str(rank).rjust(4,'0')):
                if (time.time()-os.path.getmtime(util.slash(configs['output_dir'])+ "configs/configs_"+str(rank).rjust(4,'0'))) > 5:  #give master a chance to finish writing M/configs
                    f = open (os.path.join(configs['configs_dir']+"configs_"+str(rank).rjust(4,'0')),'r')
                    configs_update = json.load(f)
                    f.close()
                    loaded = True
                else:
                    time.sleep(2)
        except Exception as e:
            with open (log_dir+"worker_"+str(rank)+"_ERROR_"+time.strftime("%B-%d-%Y-h%Hm%Ms%S")+".log", 'a') as reporter:
                reporter.write ("worker "+str(rank)+": ERROR loading M/configs .. Exiting .. ")
                reporter.write("\t\tException "+str(e))
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                reporter.write("\t\texc_type "+str(exc_type)+'\n\t\tfname '+str(fname)+'\n\t\tline no. '+str(exc_tb.tb_lineno))
                reporter.flush()
                sys.exit(1)
    #at this point now master and workers have the same config dictionary
    configs={}
    for key in configs_update.keys():
        configs[key] = configs_update[key]
    log            =  configs['logs_dir']+"worker_"+configs['timestamp']+".log"
    configs['worker_log'] = log    
    try:
        os.rename(os.path.join(configs['configs_dir']+"configs_"+str(rank).rjust(4,'0')), os.path.join(configs['configs_dir']+"configs_"+str(rank).rjust(4,'0')+"_loaded_"+configs['timestamp']))
    except:
        with open (log_dir+"worker_"+str(rank)+"_ERROR_"+configs['timestamp']+".log", 'a') as reporter:
            reporter = open (log_dir+"worker_"+configs['timestamp']+".log", 'a')
            reporter.write ("\nworker #"+str(rank)+" says "+time.strftime("%B-%d-%Y-h%Hm%Ms%S")+": FATAL, unable to rename "+os.path.join(configs['configs_dir']+"configs_"+str(rank).rjust(4,'0'))+"\nExiting..")
            sys.exit(1)
    reporter = None
    if rank == 1: # have worker 1 report activity 
        mywrite(log, "\n\t\t\t\tworker #"+str(rank)+": "+time.strftime("%B-%d-%Y-h%Hm%Ms%S")+", loaded configs from .."+'/'.join(configs['output_dir'].split('/')[-3:])+ ", no. of plots (my AXES) ".rjust(16,' ')+str(len(configs['AXES'])))
    return configs
#######################################################################################
def Done(plot, configs, rank, log):
    file_no, rows, cols, pos, prefix, file_path, title, processing_bit = plot[0], plot[1], plot[2], plot[3], plot[4], plot[5], plot[6], plot[7]
    if processing_bit == 0:
        mywrite(log,"\n\t\t\t\tworker "+str(rank)+" not processing: "+file_path)
        return False
    for root, dirs, files in os.walk(configs['DUMP_DIR']):
        for f in files:
            f=f.split('_figure_')
            if len(f)>1:
                if f[1] == str(file_no).rjust(4,'0')+ "_rows_"+str(rows).rjust(4,'0')+ "_cols_"+str(cols).rjust(4,'0')+ "_pos_"+str(pos).rjust(4,'0')+'.done':
                    return True
    return False
#######################################################################################
def get_slices(configs):
    slices = {}
    for key in configs['slices'].keys():
        slices[key] = configs['slices'][key]
    return slices
#######################################################################################
def dp1 (slices, file_path, num_lines, configs):
    #-------------------------------------
    df = open (file_path, 'r')
    #-------------------------------------
    
    lines_so_far = 0

    while lines_so_far < num_lines:                
        next(df)                                     # skip over objects
        Bs     = [int(s) for s in next(df).split()]
        Ds     = [int(s) for s in next(df).split()]
        next(df)                                     #skip over Xs (solution vector)
        next(df)                                     #skip over coresize/exec_time
        lines_so_far += 5         
        assert len(Bs) == len(Ds)

        instance_size = 0
        for key in slices['segments'].keys():
            slices['segments'][key]['count']=0
        if len(Bs)>0:
            for b,d in zip (Bs, Ds):
                instance_size += 1
                #-------------------------------------
                the_right_key = assign_range(slices, b, d)
                slices['segments'][the_right_key]['count'] += 1
                #-------------------------------------
            counted=0
            for key in slices['segments'].keys():
                slices['segments'][key]['fractions'].append(float(slices['segments'][key]['count'])/instance_size)
                counted += slices['segments'][key]['count']

            assert instance_size == len(Bs) == len(Ds)  == counted
    return slices
#######################################################################################                            
def dp2 (slices, file_path, num_lines, configs):
    # this function only considers b's and d's where x == 1
    #-------------------------------------
    df = open (file_path, 'r')
    #-------------------------------------
    
    lines_so_far = 0

    while lines_so_far < num_lines:                
        next(df)                                     # skip over objects
        Bs     = [int(s) for s in next(df).strip().split()]
        Ds     = [int(s) for s in next(df).strip().split()]
        Xs     = [int(x) for x in next(df).strip().split()]  #skip over Xs (solution vector)
        next(df)                                     #skip over coresize/exec_time
        lines_so_far += 5         
        assert len(Bs) == len(Ds)

        instance_size = 0
        for key in slices['segments'].keys():
            slices['segments'][key]['count']=0
        if len(Bs)>0:
            for b,d,x in zip (Bs, Ds, Xs):
                if x==1:# and d>0: ##################### tweak this to your taste #####################
                    instance_size += 1
                    #-------------------------------------
                    the_right_key = assign_range(slices, b, d)
                    slices['segments'][the_right_key]['count'] += b ########### rather than count #########
                    #-------------------------------------
            for key in slices['segments'].keys():
                slices['segments'][key]['fractions'].append(float(slices['segments'][key]['count'])/sum(Bs))

            #assert instance_size == len(Bs) == len(Ds)  == counted
    return slices
####################################################################################### 
def dump(file_no, rows, cols, pos, prefix, file_path, title, filled_slices, configs, rank):
    current_file = configs['DUMP_DIR'] + "worker_"+str(rank).rjust(4,'0')+ "_figure_"+str(file_no).rjust(4,'0')+ "_rows_"+str(rows).rjust(4,'0')+ "_cols_"+str(cols).rjust(4,'0')+ "_pos_"+str(pos).rjust(4,'0')
    with  open(current_file,'w') as f:
        json.dump([file_no, rows, cols, pos, prefix, file_path, title, filled_slices], f)
        f.close()
    try:
        os.rename (current_file, current_file+'.done') #master will use 'done' as signal this worker is done writing to this file
    except:
        mywrite (log, "\n\t\t\t\tworker #"+str(rank)+" says "+time.strftime("%B-%d-%Y-h%Hm%Ms%S")+": WARNING, unable to rename "+current_file+'.done .. master will wait forever')
        pass
#######################################################################################
def work(arguments, rank):
    configs  = setup(arguments, rank)  
    ###################################
    data_processor = None
    try:
        if configs['data_processor'] == 'dp1':
            data_processor = dp1
        elif configs['data_processor'] == 'dp2':
            data_processor = dp2
        else:
            data_processor = dp1 # default
    except:
        data_processor = dp1 # default if no configs['data_processor'] was provided
    ###################################
      
    log      = configs['worker_log']
    AXES       = configs['AXES']
    slices      = {}
    
    if len(AXES) > 0:
        t0=time.time()
        for  pair in AXES:
            mywrite(log, "\n\t\t\t\tworker #"+str(rank)+" I'm working,\t")
            num_lines = max_lines(pair, configs)
            for plot in pair: 
                if not Done(plot, configs, rank, log):
                    
                    #####################################################################
                    slices      = get_slices(configs)
                    file_no, rows, cols, pos, prefix, file_path, title, processing_bit = plot[0], plot[1], plot[2], plot[3], plot[4], plot[5], plot[6]+", "+util.pf(float(num_lines)/5.0)+" instances]", plot[7]
                    if rank == 1:
                        mywrite(log, "\n\t\t\t\tworker #"+str(rank)+" working on file no. "+str(file_no))
                    filled_slices = data_processor(slices, file_path, num_lines, configs)              
                    dump(file_no, rows, cols, pos, prefix, file_path, title.replace(']',','+data_processor.__name__+']'), filled_slices, configs, rank)
                    #####################################################################
  
        t1=time.time()
        mywrite(log, "\n\t\t\t\tworker #"+str(rank) +" I'm done ("+str(int(t1-t0))+"s)! Good night!")
    else:
        mywrite(log, "\n\t\t\t\tworker #"+str(rank)+": I got nothing to do. I received an empty AXES (there is probably more workers than plots). Goodbye!")
       